* Basic Setup

** Install MELPA

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC


**  Startup Page
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-hl-line-mode t)
(tool-bar-mode -1)
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC


** Disable backup files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC


** Package Manager
#+BEGIN_SRC
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-hl-line-mode t)
(tool-bar-mode -1)
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC


* Key Bindings

** Evil Mode
#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding nil)

(use-package evil-collection
  :ensure t
  :config
  (evil-collection-init))

;; Enable Evil
(require 'evil)
(evil-mode 1)
#+END_SRC


* Feature Enhancements

** Projectile
#+BEGIN_SRC
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (setq projectile-completion-system 'ivy)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC


** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) "))

;; Optional: Enable ivy-rich for better project and buffer descriptions
(use-package ivy-rich
  :ensure t
  :config
  (ivy-rich-mode 1))
#+END_SRC


** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)

;; Optional: Add keybindings for projectile and counsel-git-grep
(global-set-key (kbd "C-c p f") 'counsel-git)  ; Find file in Git repo
(global-set-key (kbd "C-c p p") 'counsel-git)  ; Switch to Git project
(global-set-key (kbd "C-c p g") 'counsel-git-grep) ; Search in Git repo
#+END_SRC


** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    (:map evil-normal-state-map
          ("/" . my-swiper))
    :config
    (defun my-swiper ()
      "Run swiper unless in minibuffer."
      (interactive)
      (if (minibufferp)
          (self-insert-command 1)
        (swiper))))
#+END_SRC


** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC


* UI Settings

** basic enhancements
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-hl-line-mode t)
(tool-bar-mode -1)
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC


** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook ((org-mode) . org-bullets-mode))
#+END_SRC

